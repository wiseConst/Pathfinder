#version 460

#extension GL_EXT_mesh_shader : require

#extension GL_GOOGLE_include_directive : require
#include "Include/Globals.h"

layout(local_size_x = MESHLET_LOCAL_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = MAX_MESHLET_VERTEX_COUNT, max_primitives = MAX_MESHLET_TRIANGLE_COUNT) out; // 126 optimal nvidia

void main()
{
#if 0
    const uint mi = gl_WorkGroupID.x;
    const uint ti = gl_LocalInvocationID.x;

    const uint primitiveCount = s_GlobalMeshletBuffers[u_PC.MeshletBufferIndex].meshlets[mi].triangleCount;
    const uint vertexCount = s_GlobalMeshletBuffers[u_PC.MeshletBufferIndex].meshlets[mi].vertexCount;
    if (ti == 0) SetMeshOutputsEXT(vertexCount, primitiveCount);
 
    const uint32_t vertexOffset = s_GlobalMeshletBuffers[u_PC.MeshletBufferIndex].meshlets[mi].vertexOffset;
    for(uint i = ti; i < vertexCount; i += MESHLET_LOCAL_GROUP_SIZE)
    {
        const uint vi = s_GlobalMeshletVerticesBuffers[u_PC.MeshletVerticesBufferIndex].vertices[vertexOffset + i];
        const vec4 WorldPos = u_PC.Transform * vec4(s_GlobalVertexPosBuffers[u_PC.VertexPosBufferIndex].Positions[vi].Position, 1.0);
        
        gl_MeshVerticesEXT[i].gl_Position = u_PC.LightDataBuffer.DirLightViewProjMatrices[u_PC.StorageImageIndex] * WorldPos;
    }

    const uint32_t triangleOffset = s_GlobalMeshletBuffers[u_PC.MeshletBufferIndex].meshlets[mi].triangleOffset;
    for(uint i = ti; i < primitiveCount; i += MESHLET_LOCAL_GROUP_SIZE)
    {
        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(
            s_GlobalMeshletTrianglesBuffers[u_PC.MeshletTrianglesBufferIndex].triangles[triangleOffset+3*i+0], 
            s_GlobalMeshletTrianglesBuffers[u_PC.MeshletTrianglesBufferIndex].triangles[triangleOffset+3*i+1], 
            s_GlobalMeshletTrianglesBuffers[u_PC.MeshletTrianglesBufferIndex].triangles[triangleOffset+3*i+2]);
    }
    #endif
}