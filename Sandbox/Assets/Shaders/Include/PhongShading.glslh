
// #extension GL_GOOGLE_include_directive : require
// #include "Assets/Shaders/Include/Lights.h"

vec3 DirectionalLightContribution(const float kShadow, const vec3 V, const vec3 normal, const DirectionalLight dl, const vec3 albedo, const float ao)
{
    const vec3 L = normalize(dl.Direction);
    const vec3 N = normalize(normal);

    const float kD = max(dot(N, L), 0.0);
    const vec3 diffuse = kD * dl.Color * albedo;

    const vec3 H = normalize(L + V);
    const float spec = pow(max(dot(N, H), 0.0), 64);
    const float specular = spec * (1.f - kD);
    
    const vec3 ambient = albedo * ao * 0.08f;
    return ambient + (diffuse + specular) * dl.Intensity * kShadow;
}

vec3 PointLightContribution(const float kShadow, const vec3 worldPos, const vec3 normal, const vec3 V, const PointLight pl, const vec3 albedo, const float ao)
{
    const vec3 ambient = 0.08f * albedo * ao;
	vec3 light_dir = normalize(pl.Position - worldPos);
    float lambertian = max(dot(light_dir, normal), 0.0);
    
    float light_distance = distance(pl.Position, worldPos);
    float att = clamp(1.0 - (light_distance * light_distance) / (pl.Radius * pl.Radius), 0.0, 1.0);
    
    vec3 halfDir = normalize(light_dir + V);
    float specAngle = max(dot(halfDir, normal), 0.0);
    float specular = pow(specAngle, 32.0);
    
    return kShadow * pl.Color * pl.Intensity * att * (lambertian * albedo + specular) + ambient * att;
}

vec3 SpotLightContribution(const vec3 worldPos, const vec3 normal, const vec3 V, const SpotLight sl, const vec3 albedo, const float ao)
{
    const vec3 N = normalize(normal);
    const vec3 L = normalize(worldPos - sl.Position);
  
    const float lambertian = max(dot(-L, normal), 0.0);
    
    const float kS = 1.f - lambertian; // PBR enjoyer
    const vec3 H = normalize(-L + V);
    const uint specPow = 64;
    const float spec = pow(max(dot(V, H), 0.0), specPow);
    const vec3 specular = spec * kS * sl.Color;
    
    // NOTE: How it works
    // theta: angle between spotlight direction and light dir
    // epsilon used for spotIntensity which gives us intensity in clamped range [0, 1]: 
    // 1) outerCutOff > innerCutOff > theta -> max light
    // 2) outerCutOff > theta > innerCutOff -> medium
    // 3) theta > outerCutOff > innerCutOff -> zero light
    const float theta = dot(normalize(sl.Direction), L);
    const float epsilon = sl.InnerCutOff - sl.OuterCutOff;
    const float spotIntensity = clamp((theta - sl.OuterCutOff) / epsilon, 0.0, 1.0);
    
    const vec3 ambient = 0.08f * albedo * ao;
    return  (lambertian * albedo + specular) * spotIntensity + ambient;
}
