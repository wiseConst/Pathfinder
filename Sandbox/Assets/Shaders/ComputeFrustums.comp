#version 460

#extension GL_GOOGLE_include_directive : require
#include "Assets/Shaders/Include/Globals.h"
#include "Assets/Shaders/Include/Culling.h"

layout(local_size_x = LIGHT_CULLING_TILE_SIZE, local_size_y = LIGHT_CULLING_TILE_SIZE, local_size_z = 1) in;

layout(set = LAST_BINDLESS_SET + 1, binding = 0, scalar) writeonly buffer LightCullingFrustum
{
    TileFrustum frustums[];
} s_GridFrustumsBuffer;

// TODO: Cone frustums https://www.youtube.com/watch?v=E-KBGNpXnrw&list=PLU2nPsAdxKWQYxkmQ3TdbLsyc1l2j25XM&index=126&ab_channel=GameEngineSeries
void main()
{
    const vec2 pixelCoords = vec2(gl_GlobalInvocationID.xy);
    if(any(greaterThan(pixelCoords, u_GlobalCameraData.FullResolution))) return;
    const uvec3 wgid = gl_WorkGroupID;
    const uint lti = gl_LocalInvocationIndex;
    const vec2 invRes = 1.0f / u_GlobalCameraData.FullResolution;

    // -Z = -1
    vec4 screenSpace[4];
    // Top left point
    screenSpace[0] = vec4(wgid.xy * LIGHT_CULLING_TILE_SIZE, -1.0, 1.0);
    // Top right point
    screenSpace[1] = vec4(vec2(wgid.x + 1.0, wgid.y) * LIGHT_CULLING_TILE_SIZE, -1.0, 1.0);
    // Bottom left point
    screenSpace[2] = vec4(vec2(wgid.x, wgid.y + 1.0) * LIGHT_CULLING_TILE_SIZE, -1.0, 1.0);
    // Bottom right point
    screenSpace[3] = vec4(vec2(wgid.x + 1.0, wgid.y + 1.0) * LIGHT_CULLING_TILE_SIZE, -1.0, 1.0);
    
    vec3 viewSpace[4];
    for(uint i = 0; i < 4; ++i)
        viewSpace[i] = ScreenSpaceToView(screenSpace[i], invRes).xyz;

    // View space eye position is always at the origin.
    const vec3 eyePos = vec3(0);
    const uint linearTileIndex = GetLinearGridIndex(pixelCoords, u_GlobalCameraData.FullResolution.x);
    s_GridFrustumsBuffer.frustums[linearTileIndex].Planes[0] = ComputePlane(eyePos, viewSpace[2], viewSpace[0]);
    s_GridFrustumsBuffer.frustums[linearTileIndex].Planes[1] = ComputePlane(eyePos, viewSpace[1], viewSpace[3]);
    s_GridFrustumsBuffer.frustums[linearTileIndex].Planes[2] = ComputePlane(eyePos, viewSpace[0], viewSpace[1]);
    s_GridFrustumsBuffer.frustums[linearTileIndex].Planes[3] = ComputePlane(eyePos, viewSpace[3], viewSpace[2]);
}