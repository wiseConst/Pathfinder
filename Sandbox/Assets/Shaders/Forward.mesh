#version 460

#extension GL_EXT_mesh_shader : require

#extension GL_GOOGLE_include_directive : require
#include "Assets/Shaders/Include/Globals.h"

layout(local_size_x = MESHLET_LOCAL_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = MAX_MESHLET_VERTEX_COUNT, max_primitives = MAX_MESHLET_TRIANGLE_COUNT) out; // 126 optimal nvidia

layout(location = 0) out VertexOutput
{
    vec4 Color;
    vec2 UV;
    vec3 WorldPos;
    mat3 TBNtoWorld;
} o_VertexOutput[];

#define DEBUG_MESHLETS 0

void main()
{
    const uint mi = gl_WorkGroupID.x;
    const uint ti = gl_LocalInvocationID.x;

    const uint primitiveCount = s_GlobalMeshletBuffers[u_PC.MeshletBufferIndex].meshlets[mi].triangleCount;
    const uint vertexCount = s_GlobalMeshletBuffers[u_PC.MeshletBufferIndex].meshlets[mi].vertexCount;
    if (ti == 0) SetMeshOutputsEXT(vertexCount, primitiveCount);

    #if DEBUG_MESHLETS
        const uint mhash = hash(mi);
        const vec3 mcolor = vec3(float(mhash & 255), float((mhash >> 8) & 255), float((mhash >> 16) & 255)) / 255.0;
    #endif
    
    const mat3 normalMatrix = transpose(inverse(mat3(u_PC.Transform)));
 
    const uint32_t vertexOffset = s_GlobalMeshletBuffers[u_PC.MeshletBufferIndex].meshlets[mi].vertexOffset;
    for(uint i = ti; i < vertexCount; i += MESHLET_LOCAL_GROUP_SIZE)
    {
        const uint vi = s_GlobalMeshletVerticesBuffers[u_PC.MeshletVerticesBufferIndex].vertices[vertexOffset + i];
        const vec4 WorldPos = u_PC.Transform * vec4(s_GlobalVertexPosBuffers[u_PC.VertexPosBufferIndex].Positions[vi].Position, 1.0);
        
        gl_MeshVerticesEXT[i].gl_Position = u_GlobalCameraData.ViewProjection * WorldPos;
        
        o_VertexOutput[i].Color = s_GlobalVertexAttribBuffers[u_PC.VertexAttribBufferIndex].Attributes[vi].Color;
        #if DEBUG_MESHLETS
              o_VertexOutput[i].Color = vec4(mcolor, 1.0);
        #endif
    
        o_VertexOutput[i].UV = s_GlobalVertexAttribBuffers[u_PC.VertexAttribBufferIndex].Attributes[vi].UV;
        o_VertexOutput[i].WorldPos = WorldPos.xyz;
        
        const vec3 N = normalize(normalMatrix * s_GlobalVertexAttribBuffers[u_PC.VertexAttribBufferIndex].Attributes[vi].Normal);
        vec3 T = normalize(normalMatrix * s_GlobalVertexAttribBuffers[u_PC.VertexAttribBufferIndex].Attributes[vi].Tangent);
        T = normalize(T - dot(T, N) * N);
        const vec3 B = cross(N, T);
    
        const mat3 TBNtoWorld = mat3(T, B, N);
        o_VertexOutput[i].TBNtoWorld = TBNtoWorld;
    }

    const uint32_t triangleOffset = s_GlobalMeshletBuffers[u_PC.MeshletBufferIndex].meshlets[mi].triangleOffset;
    for(uint i = ti; i < primitiveCount; i += MESHLET_LOCAL_GROUP_SIZE)
    {
        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(
            s_GlobalMeshletTrianglesBuffers[u_PC.MeshletTrianglesBufferIndex].triangles[triangleOffset+3*i+0], 
            s_GlobalMeshletTrianglesBuffers[u_PC.MeshletTrianglesBufferIndex].triangles[triangleOffset+3*i+1], 
            s_GlobalMeshletTrianglesBuffers[u_PC.MeshletTrianglesBufferIndex].triangles[triangleOffset+3*i+2]);
    }
}