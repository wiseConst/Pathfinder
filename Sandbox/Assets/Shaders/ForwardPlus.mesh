#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_GOOGLE_include_directive : require
#include "Include/Globals.h"
#include "Include/MeshletTaskPayload.glslh"

// NOTE: 
// This line guarantees that gl_Position is computed by the exact expression that was given in the shader without 
// any optimization as this would change the operations and therefore quite likely change the result in some minor way.
// Since I'm using DepthPrePass, I have to manually assure that gl_Position will be the same, 
// in both Forward+ and PrePassZ mesh shaders.
out invariant uvec3 gl_PrimitiveTriangleIndicesEXT[];

out gl_MeshPerVertexEXT {
  invariant vec4  gl_Position;
  invariant float gl_PointSize;
  invariant float gl_ClipDistance[];
  invariant float gl_CullDistance[];
} gl_MeshVerticesEXT[];

layout(local_size_x = MESHLET_LOCAL_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = MAX_MESHLET_VERTEX_COUNT, max_primitives = MAX_MESHLET_TRIANGLE_COUNT) out;

layout(location = 0) out VertexOutput
{
    vec4 Color;
    vec2 UV;
    vec3 WorldPos;
    flat uint32_t MaterialBufferIndex;
    mat3 TBNtoWorld;
} o_VertexOutput[];

#define DEBUG_MESHLETS 0

void main()
{
    uint32_t i = 0; // reusable var
    const uint32_t mi = tp_TaskData.baseMeshletID + uint32_t(tp_TaskData.meshlets[gl_WorkGroupID.x]);
    const uint32_t ti = gl_LocalInvocationID.x;

#ifdef __PFR_RENDER_OPAQUE_OBJECTS_
        if(CulledMeshIDBufferOpaque(u_PC.addr0).CulledMeshIDs[gl_DrawID] == s_INVALID_CULLED_OBJECT_INDEX) return;
        MeshData  md = s_GlobalMeshDataBufferOpaque.MeshesData[CulledMeshIDBufferOpaque(u_PC.addr0).CulledMeshIDs[gl_DrawID]];
#endif
    
#ifdef __PFR_RENDER_TRANSPARENT_OBJECTS_
        if(CulledMeshIDBufferTransparent(u_PC.addr0).CulledMeshIDs[gl_DrawID] == s_INVALID_CULLED_OBJECT_INDEX) return;
        MeshData  md = s_GlobalMeshDataBufferTransparent.MeshesData[CulledMeshIDBufferTransparent(u_PC.addr0).CulledMeshIDs[gl_DrawID]];
#endif

    const uint32_t primitiveCount = s_GlobalMeshletBuffers[md.meshletBufferIndex].meshlets[mi].triangleCount;
    const uint32_t vertexCount = s_GlobalMeshletBuffers[md.meshletBufferIndex].meshlets[mi].vertexCount;
    // This call will reserve output memory for storing vertex and primitive attributes (other than the vertex position). 
    // Requesting memory early helps hiding the latency required for memory allocation in the geometry engine.
    if (ti == 0) 
    {
        SetMeshOutputsEXT(vertexCount, primitiveCount);
    }

    #if DEBUG_MESHLETS
        const uint32_t mhash = hash(mi);
        const vec3 mcolor = vec3(float(mhash & 255), float((mhash >> 8) & 255), float((mhash >> 16) & 255)) / 255.0;
    #endif
 
    const mat3 normalMatrix = QuatToRotMat3(md.orientation);
    const uint32_t vertexOffset = s_GlobalMeshletBuffers[md.meshletBufferIndex].meshlets[mi].vertexOffset;
    for(i = ti; i < vertexCount; i += MESHLET_LOCAL_GROUP_SIZE)
    {
        const uint32_t vi = s_GlobalMeshletVerticesBuffers[md.meshletVerticesBufferIndex].vertices[vertexOffset + i];
        const vec3 worldPos = RotateByQuat(s_GlobalVertexPosBuffers[md.vertexPosBufferIndex].Positions[vi].Position * md.scale, md.orientation) + md.translation;

        gl_MeshVerticesEXT[i].gl_Position = CameraData(u_PC.CameraDataBuffer).ViewProjection * vec4(worldPos, 1.0);
        o_VertexOutput[i].WorldPos = worldPos;

        o_VertexOutput[i].Color = UnpackU8Vec4ToVec4(s_GlobalVertexAttribBuffers[md.vertexAttributeBufferIndex].Attributes[vi].Color);
        #if DEBUG_MESHLETS
              o_VertexOutput[i].Color = vec4(mcolor, 1.0);
        #endif

        o_VertexOutput[i].UV = s_GlobalVertexAttribBuffers[md.vertexAttributeBufferIndex].Attributes[vi].UV;
        o_VertexOutput[i].MaterialBufferIndex = md.materialBufferIndex;

        const vec3 N = normalize(normalMatrix * s_GlobalVertexAttribBuffers[md.vertexAttributeBufferIndex].Attributes[vi].Normal);
        vec3 T = normalize(normalMatrix * s_GlobalVertexAttribBuffers[md.vertexAttributeBufferIndex].Attributes[vi].Tangent);
        T = normalize(T - dot(T, N) * N);
        const vec3 B = cross(N, T);
        o_VertexOutput[i].TBNtoWorld = mat3(T, B, N);
    }

    const uint32_t triangleOffset = s_GlobalMeshletBuffers[md.meshletBufferIndex].meshlets[mi].triangleOffset;
    for(i = ti; i < primitiveCount; i += MESHLET_LOCAL_GROUP_SIZE)
    {
        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(
            s_GlobalMeshletTrianglesBuffers[md.meshletTrianglesBufferIndex].triangles[triangleOffset + 3 * i + 0], 
            s_GlobalMeshletTrianglesBuffers[md.meshletTrianglesBufferIndex].triangles[triangleOffset + 3 * i + 1], 
            s_GlobalMeshletTrianglesBuffers[md.meshletTrianglesBufferIndex].triangles[triangleOffset + 3 * i + 2]);
    }

}